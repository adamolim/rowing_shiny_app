############################################################################## #
# Rowing
############################################################################## #

# Auteur: Michele Adamoli 14.03.2021


# install.packages("shiny")
# install.packages('rsconnect')
library(shiny) # Web Application Framework for R - Version 1.6.0
library(tidyverse) # Easily Install and Load the'Tidyverse' - Version 1.3.0
library(plotly) # Create Interactive Web Graphics via "plotly.js" - Version 4.9.3
#evtl. ggiraph?

# Donn√©es pour connecter l'ordi au server rsconnect::setAccountInfo(name='agathos1984', token='76E90A9EB716D4C2A4DFB84DE9918EFA', secret='y7eyGdqPfZ2UDqnmIyeAKrnK1p6n6YxX7tgZcntg')
# https://www.shinyapps.io/admin/#/dashboard video 32:51

############################################################################## #
# Data and analysis ####
############################################################################## #

source("RCB Data.R")

############################################################################## #
# User interface ####
############################################################################## #

ui <-
  
  # Navigation bar
  
  navbarPage(
    title =
      div(# img(src = "Logo_Rowing_Club_Bern.jpg",
        #           height = 40),
        "RCB Stats"),
    
    
    navbarMenu(
      "Kilometers",
      
      # 1.1 Kilometers  - club ####
      
      tabPanel("Club",
               
               # Page
               
               fluidPage(
                 # Tab title
                 
                 tags$div(tags$h2("Rowing Club Bern")),
                 
                 # Add the description of the tabPanel with a new div tag
                 
                 tags$div(
                   tags$p(
                     "RCB is so much more than numbers and figures. But why not have look on them, up to time? Here you can check 
                     the evolution of the total number of kilometers, rowers trips. Feel free to click around!"
                   )
                 ),
                 
                 # Sidebar layout with a input and output definitions
                 
                 sidebarLayout(# Sidebar panel for inputs
                   
                   sidebarPanel(
                     
                     # Input: Selector for the dimension
                     
                     selectInput(
                       inputId = "Dim",
                       label = "Select...",
                       choices = c(
                         "Kilometers of RCB" = "DIST_KM",
                         "Number of rowers" = "NUMBER_PERSON",
                         "Number of trips" = "NUMBER_TRIP",
                         "Km per rower (average)" = "AVG_KM_PERSON",
                         "Km per trip (average)" = "AVG_KM_TRIP"
                       )
                     )
                   ),
                   
                   # Main panel for displaying outputs
                   
                   mainPanel(plotlyOutput("Main_Data")))
               )),
      
      # 1.2 Kilometers  - groups ####
      
      tabPanel("Groups",
               
               # Page
               
               fluidPage(
                 # Tab title
                 
                 tags$div(tags$h2("Groups in RCB")),
                 
                 # Add the description of the tabPanel with a new div tag
                 
                 tags$div(
                   tags$b("Are Breitensportler rowing more than Regatta rowers?"),
                   tags$p(
                     "Every person (and rower as well) is different. But perhaps you can identify yourself 
                     among the following groups and check how these groups are evolving
                     in time."
                   )
                 ),
                 
                 # Sidebar layout with a input and output definitions
                 
                 sidebarLayout(# Sidebar panel for inputs
                   
                   sidebarPanel(
                     # Input: Selector for the dimension
                     
                     selectInput(
                       inputId = "Dim_group",
                       label = "Select...",
                       choices = c(
                         "Kilometers of RCB" = "DIST_KM",
                         "Number of rowers" = "NUMBER_PERSON",
                         "Number of trips" = "NUMBER_TRIP",
                         "Km per rower (average)" = "AVG_KM_PERSON",
                         "Km per trip (average)" = "AVG_KM_TRIP"
                       )
                     )
                   ),
                   
                   # Main panel for displaying outputs
                   
                   # Main panel for displaying outputs
                   mainPanel(
                     # Output: Tabset w/ plot, summary, and table
                     
                     tabsetPanel(
                       type = "tabs",
                       tabPanel("Gender", plotlyOutput("Gender_group")),
                       tabPanel("Sport",  plotlyOutput("Sport_group"))
                     )
                   ))
               )),
      
      
      # 1.3 Kilometers- rowers ####
      
      tabPanel("Rowers",
               
               # Page
               
               fluidPage(
                 # Tab title
                 
                 tags$div(tags$h2("Rowers in RCB")),
                 
                 # Add the description of the tabPanel with a new div tag
                 
                 tags$div(
                   tags$b("How much do you row in RCB?"),
                   tags$p(
                     "Hopefully, you can row and enjoy as many kilometers as you wish.
                     Some people just need more: you can find
                     here the rowers with most kilometers. The data can be presented
                     for a given year or cumulated."
                   )
                 ),
                 
                 # Sidebar layout with a input and output definitions
                 
                 sidebarLayout(
                   # Sidebar panel for inputs
                   
                   sidebarPanel(
                     
                     # Input: Selector for the gender
                     
                     radioButtons(
                       inputId  = "Sex_indiv",
                       label = "Gender",
                       choices = c(
                         "Total" = "_T",
                         "Female" = "FEM",
                         "Male" = "HOM"
                       ),
                       selected = "_T",
                       inline = FALSE,
                       width = NULL,
                       choiceNames = NULL,
                       choiceValues = NULL
                     ),
                     
                     # Input: Selector for the sport
                     
                     radioButtons(
                       inputId  = "Sport_indiv",
                       label = "Sport category",
                       choices = c(
                         "Total" = "_T",
                         "Regatta Team" = "REGATTA",
                         "Breitensport" = "BREIT"
                       ),
                       selected = "_T",
                       inline = FALSE,
                       width = NULL,
                       choiceNames = NULL,
                       choiceValues = NULL
                     ),
                     
                     # Input: Selector for number of people showed
                     
                     sliderInput(
                       inputId = "Number_indiv",
                       label = "Number of people showed",
                       min = 3,
                       max = 30,
                       value = 6,
                       sep = "",
                       ticks = FALSE,
                       dragRange = FALSE
                     ),
                     
                     # Input: Selector for the year
                     
                     sliderInput(
                       inputId = "Year_indiv",
                       label = "Year",
                       min = y_min,
                       max = y_max,
                       value = y_max,
                       sep = "",
                       ticks = FALSE,
                       dragRange = FALSE
                     ),
                     
                     # Input: Selector for the year
                     
                     sliderInput(
                       inputId = "Year_indiv_cumul",
                       label = "Year (cumul. data)",
                       min = y_min,
                       max = y_max,
                       value = y_min,
                       sep = "",
                       ticks = FALSE,
                       dragRange = FALSE
                     )
                   ),
                   
                   # Main panel for displaying outputs
                   mainPanel(# Output: Tabset w/ plot, summary, and table
                     
                     tabsetPanel(
                       type = "tabs",
                       tabPanel("Yearly data", plotlyOutput("rowers_km")),
                       tabPanel("Cumulative data", plotlyOutput("rowers_km_cumul"))
                     ))
                 )
               ))
      
      
    ),
    
    # 2.1 Attendance - months ####
    
    navbarMenu(
      "Peak times",
      tabPanel(
        "Months of the years",
        
        # Page
        
        fluidPage(
          # Tab title
          
          tags$div(tags$h2("Months of the year")),
          
          # Add the description of the tabPanel with a new div tag
          
          tags$div(
            tags$b("Is RCB rowing also in winter?"),
            tags$p(
              "Rowing is not a winter sport, or is it? Have a look on how many people row
            in the club per months. You can compare the yearly data with the
            average of the last years."
            )
          ),
          
          # Sidebar layout with a input and output definitions
          
          sidebarLayout(# Sidebar panel for inputs
            
            sidebarPanel(
              
              # Input for the year
              
              sliderInput(
                inputId = "Month_Attendance_Input",
                label = "Select the year",
                min = y_min,
                max = y_max,
                value = y_max,
                sep = "",
                ticks = FALSE,
                dragRange = FALSE
              )
            ),
            mainPanel(plotlyOutput("Month_Attendance")))
        )
      ),
      
      # 2.2 Attendance - weekdays ####
      
      tabPanel(
        "Days of the week",
        
        # Page
        
        fluidPage(
          # Tab title
          
          tags$div(tags$h2("Days of the week")),
          
          # Add the description of the tabPanel with a new div tag
          
          tags$div(
            tags$b("How busy is the club on the weekend?"),
            tags$p(
              "Thanks god is Friday and you can finally go row. But look, you are for sure 
              not the only one who thinks so."
            )
          ),
          
          # Sidebar layout with a input and output definitions
          
          sidebarLayout(# Sidebar panel for inputs
            
            sidebarPanel(
              
              # Input: Selector for the season
              
              # Input for the year
              
              sliderInput(
                inputId = "DayWeek_Attendance_Input",
                label = "Select the year",
                min = y_min,
                max = y_max,
                value = y_max,
                sep = "",
                ticks = FALSE,
                dragRange = FALSE
              ),
              
              radioButtons(
                inputId  = "Season_DW_Attendance_Input",
                label = "Season",
                choices = c("Winter", "Spring", "Summer", "Autumn"),
                selected = "Spring",
                inline = FALSE,
                width = NULL,
                choiceNames = NULL,
                choiceValues = NULL)
              
            ),
            mainPanel(plotlyOutput(
              "DayWeek_Attendance"
            )))
        )
      ),
      
      # 2.3 Attendance - hours  ####
      
      tabPanel(
        "Hours of the day",
        
        # Page
        
        fluidPage(
          # Tab title
          
          tags$div(tags$h2("Hours of the day")),
          
          # Add the description of the tabPanel with a new div tag
          
          tags$div(
            tags$b("Who does row early in the morning?"),
            tags$p(
              "Wake up, it's 6 A.M and it is time for rowing! But before check
              if other people usually go there at that hour."
            )
          ),
          
          # Sidebar layout with a input and output definitions
          
          sidebarLayout(# Sidebar panel for inputs
            
            sidebarPanel(
              
              # Input for the year
              
              sliderInput(
                inputId = "Year_Hours_Att_Input",
                label = "Select the year",
                min = y_min,
                max = y_max,
                value = y_max,
                sep = "",
                ticks = FALSE,
                dragRange = FALSE),
              
              # Input: Selector for the season
              
              radioButtons(
                inputId  = "Season_Hours_Att_Input",
                label = "Season",
                choices = c("Winter", "Spring", "Summer", "Autumn"),
                selected = "Spring",
                inline = FALSE,
                width = NULL,
                choiceNames = NULL,
                choiceValues = NULL),
              
              # Input: Selector for the dimension
              
              selectInput(
                inputId = "DayWeek_Hours_Att_Input",
                label = "Day of the week",
                choices = c(
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday" ,
                  "Saturday" ,
                  "Sunday" )
              )
            ),
            mainPanel(plotlyOutput(
              "Hour_Attendance"
            )))
        )
      )
      
    ),
    
    
    # 3.1 Disciplines ####
    
    navbarMenu(
      "Disciplines",
      
      # 3.1.1 Scull or sweep ####  
      
      tabPanel("Scull or sweep",
               
               # Page
               
               fluidPage(
                 # Tab title
                 
                 tags$div(tags$h2("Scull or sweep")),
                 
                 # Add the description of the tabPanel with a new div tag
                 
                 tags$div(
                   tags$b("How many rowers do like to sweep?"),
                   tags$p(
                     "In RCB, almost all rowers begins with sculling. 
                     But who can resist the charme of the the sweeping technique?
                     Please note that, in order to consider the different size of 
                     the crews, distances and trips
                     are showed for the persons and for the boats."
                   )
                 ),
                 
                 # Sidebar layout with a input and output definitions
                 
                 sidebarLayout(# Sidebar panel for inputs
                   
                   sidebarPanel(
                     
                     # Input: Selector for the dimension
                     
                     selectInput(
                       inputId = "Dim_Sweep_scull",
                       label = "Select...",
                       choices = c(
                         "Persons' kilometers" = "DIST_KM_PERS",
                         "Persons' trips" = "NUMBER_TRIP_PERS",
                         "Boats' kilometers" = "DIST_KM_BOAT",
                         "Boats' trips" = "NUMBER_TRIP_BOAT"
                       )
                     )
                   ),
                   
                   mainPanel(plotlyOutput("Sweep_scull")))
                 
               )),
      
      # 3.2.1 Crew size ####
      
      tabPanel("Crew size",
               
               # Page
               
               fluidPage(
                 # Tab title
                 
                 tags$div(tags$h2("Crew size")),
                 
                 # Add the description of the tabPanel with a new div tag
                 
                 tags$div(
                   tags$b("Does the size of the team matter?"),
                   tags$p(
                     "Of course, it does! Some rowers prefer to enjoy the calm of the lake all alone, 
                     some others need a team in order to go further and faster.
                     Distances and trips are showed for the persons and for the boats."
                   )
                 ),
                 
                 # Sidebar layout with a input and output definitions
                 
                 sidebarLayout(# Sidebar panel for inputs
                   
                   sidebarPanel(

                     # Input: Selector for the dimension
                     
                     # Input: Selector for the dimension
                     
                     selectInput(
                       inputId = "Dim_crew_size",
                       label = "Select...",
                       choices = c(
                         "Persons' kilometers" = "DIST_KM_PERS",
                         "Persons' trips" = "NUMBER_TRIP_PERS",
                         "Boats' kilometers" = "DIST_KM_BOAT",
                         "Boats' trips" = "NUMBER_TRIP_BOAT"
                       )
                     )
                   ),
                   
                   mainPanel(plotlyOutput("Crew_size")))
                 
               )),
      
      # 3.3.3  Crews destinations ####
      
      tabPanel(
        "Crews destinations",
        
        # Page
        
        fluidPage(
          # Tab title
          
          tags$div(tags$h2("Crews' destinations")),
          
          # Add the description of the tabPanel with a new div tag
          
          tags$div(tags$b("How far crews usually row?"),
                   tags$p("Apparently, rowing alone is harder than rowing in a team. 
                          Do bigger teams choose to go further than smaller crews?")),
          
          # Sidebar layout with a input and output definitions
          
          sidebarLayout(# Sidebar panel for inputs
            
            sidebarPanel(

              # Input: Selector for number ofsize of the crew
              

              selectInput(
                inputId = "Size_crew",
                label = "Crew's size",
                choices = c(
                  "Single" = "1",
                  "Double" = "2",
                  "Quad" = "4",
                  "Octuple" = "8"
                )),
              
              # Input: Selector for the year
              
              sliderInput(
                inputId = "Year_crew",
                label = "Year",
                min = y_min,
                max = y_max,
                value = y_max,
                sep = "",
                ticks = FALSE,
                dragRange = FALSE
              )
              
            ),
            
            mainPanel(plotlyOutput("Crew_destination")))
          
        )
      )
      
    ),
    
    # 4.1 Boats  ####
    
    navbarMenu("Boats",
               
               # 4.1.1 Single  ####
               
               tabPanel(
                 "Singles",
                 
                 # Page
                 
                 fluidPage(
                   # Tab title
                   
                   tags$div(tags$h2("Singles")),
                   
                   # Add the description of the tabPanel with a new div tag
                   
                   tags$div(
                     tags$b("What are the club's favorite singles?"),
                     tags$p(
                       "Every rower has (at least secretly) his own favorite boat.
                       Let's have a look on the numbers of kilometers they have accomplished:
                       the data are available for a given year or cumulated."
                     )
                   ),
                   
                   # Sidebar layout with a input and output definitions
                   
                   sidebarLayout(
                     # Sidebar panel for inputs
                     
                     sidebarPanel(
                       # Input for the boat: einer
                       
                       checkboxGroupInput(
                         inputId = "Boat1",
                         label = "Single",
                         choices = BOAT_NAME.1x,
                         selected = c("Poseidon", "Pole Star"),
                         inline = FALSE,
                         width = NULL,
                         choiceNames = NULL,
                         choiceValues = NULL
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_1_first",
                         label = "First year",
                         min = y_min,
                         max = y_max,
                         value = y_min,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_1_last",
                         label = "Last year",
                         min = y_min,
                         max = y_max,
                         value = y_max,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       )
                     ),
                     
                     # Main panel for displaying outputs
                     mainPanel(# Output: Tabset w/ plot, summary, and table
                       
                       tabsetPanel(
                         type = "tabs",
                         tabPanel("Yearly", plotlyOutput("Boat1_km")),
                         tabPanel("Cumulative", plotlyOutput("Boat1_cumsum"))
                       ))
                   )
                 )
               ),
               
               # 4.1.2 Doubles  ####
               
               tabPanel(
                 "Doubles",
                 
                 # Page
                 
                 fluidPage(
                   # Tab title
                   
                   tags$div(tags$h2("Doubles")),
                   
                   # Add the description of the tabPanel with a new div tag
                   
                   tags$div(
                     tags$b("What are the club's favorite doubles?"),
                     tags$p(
                       "Every rower has (at least secretly) his own favorite boat.
                       Let's have a look on the number of kilometers they have accomplished:
                       the data are available for a given year or cumulated."
                     )
                   ),
                   
                   # Sidebar layout with a input and output definitions
                   
                   sidebarLayout(
                     # Sidebar panel for inputs
                     
                     sidebarPanel(
                       # Input for the boat: einer
                       
                       checkboxGroupInput(
                         inputId = "Boat2",
                         label = "Double (scull)",
                         choices = BOAT_NAME.2x,
                         selected = c("Wallaby", "Eisvogel"),
                         inline = FALSE,
                         width = NULL,
                         choiceNames = NULL,
                         choiceValues = NULL
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_2_first",
                         label = "First year",
                         min = y_min,
                         max = y_max,
                         value = y_min,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_2_last",
                         label = "Last year",
                         min = y_min,
                         max = y_max,
                         value = y_max,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       )
                     ),
                     
                     # Main panel for displaying outputs
                     mainPanel(# Output: Tabset w/ plot, summary, and table
                       
                       tabsetPanel(
                         type = "tabs",
                         tabPanel("Yearly", plotlyOutput("Boat2_km")),
                         tabPanel("Cumulative", plotlyOutput("Boat2_cumsum"))
                       ))
                   )
                 )
               ),
               
               # 4.1.3 Quads  ####
               
               tabPanel(
                 "Quads",
                 
                 # Page
                 
                 fluidPage(
                   # Tab title
                   
                   tags$div(tags$h2("Quads")),
                   
                   # Add the description of the tabPanel with a new div tag
                   
                   tags$div(
                     tags$b("What are the club's favorite quads?"),
                     tags$p(
                       "Every rower has (at least secretly) his own favorite boat.
                       Let's have a look on the number of kilometers they have accomplished:
                       the data are available for a given year or cumulated."
                     )
                   ),
                   
                   # Sidebar layout with a input and output definitions
                   
                   sidebarLayout(
                     # Sidebar panel for inputs
                     
                     sidebarPanel(
                       # Input for the boat: einer
                       
                       checkboxGroupInput(
                         inputId = "Boat4",
                         label = "Quads (scull)",
                         choices = BOAT_NAME.4x,
                         selected = c("Presto", "Schwanen Stuepfer"),
                         inline = FALSE,
                         width = NULL,
                         choiceNames = NULL,
                         choiceValues = NULL
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_4_first",
                         label = "First year",
                         min = y_min,
                         max = y_max,
                         value = y_min,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_4_last",
                         label = "Last year",
                         min = y_min,
                         max = y_max,
                         value = y_max,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       )
                     ),
                     
                     # Main panel for displaying outputs
                     mainPanel(# Output: Tabset w/ plot, summary, and table
                       
                       tabsetPanel(
                         type = "tabs",
                         tabPanel("Yearly", plotlyOutput("Boat4_km")),
                         tabPanel("Cumulative", plotlyOutput("Boat4_cumsum"))
                       ))
                   )
                 )
               ),
               
               # 4.1.4 Octuple  ####
               
               tabPanel(
                 "Octuples",
                 
                 # Page
                 
                 fluidPage(
                   # Tab title
                   
                   tags$div(tags$h2("Octuples")),
                   
                   # Add the description of the tabPanel with a new div tag
                   
                   tags$div(
                     tags$b("What are the club's favorite octuples?"),
                     tags$p(
                       "Every rower has (at least secretly) his own favorite boat.
                       Let's have a look on the number of kilometers they have accomplished:
                       the data are available for a given year or cumulated."
                     )
                   ),
                   
                   # Sidebar layout with a input and output definitions
                   
                   sidebarLayout(
                     # Sidebar panel for inputs
                     
                     sidebarPanel(
                       # Input for the boat: einer
                       
                       checkboxGroupInput(
                         inputId = "Boat8",
                         label = "Octuple (sweep)",
                         choices = BOAT_NAME.8x,
                         selected = c("Big Wig", "Power Achter"),
                         inline = FALSE,
                         width = NULL,
                         choiceNames = NULL,
                         choiceValues = NULL
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_8_first",
                         label = "First year",
                         min = y_min,
                         max = y_max,
                         value = y_min,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       ),
                       
                       # Input: Selector for the year
                       
                       sliderInput(
                         inputId = "Year_boat_8_last",
                         label = "Last year",
                         min = y_min,
                         max = y_max,
                         value = y_max,
                         sep = "",
                         ticks = FALSE,
                         dragRange = FALSE
                       )
                     ),
                     
                     # Main panel for displaying outputs
                     mainPanel(# Output: Tabset w/ plot, summary, and table
                       
                       tabsetPanel(
                         type = "tabs",
                         tabPanel("Yearly", plotlyOutput("Boat8_km")),
                         tabPanel("Cumulative", plotlyOutput("Boat8_cumsum"))
                       ))
                   )
                 )
               )
               
               
               
               )
    
    
  )




############################################################################## #
# Server ####
############################################################################## #

server <- function(input, output) {
  # 1.1 Kilometers  - club ####
  
  output$Main_Data <- renderPlotly({
    # Reactive filter
    
    d.ANA.01 <- d.ANA.01.6 %>%
      filter(DIMENSION == input$Dim)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.01, mapping = aes(x = YEAR, y = Value)) +
        
        geom_line(size = 0.3, color = color_rcb_official) +
        
        geom_point(aes(text = paste(Value, UNIT)), size = 2.5, color = color_rcb_official) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(angle = 90,
                                     vjust = 0.5)
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_x_continuous(breaks = seq(y_min, y_max, 1)),
      tooltip = "text"
    )
    
  })
  
  # 1.2 Kilometers  - groups ####
  
  # # 1.1.1 Gender ####
  
  output$Gender_group <- renderPlotly({
    # Reactive filter
    
    # Pr√©paration pour les deux sexes
    
    d.ANA.06.SEX <- d.ANA.06.11 %>%
      filter(DIMENSION == input$Dim_group) %>%
      filter(SPORT == "_T") %>%
      filter(SEX != "_T")
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.06.SEX,
             mapping = aes(
               x = YEAR, y = Value, color = SEX
             )) +
        
        geom_line(aes(x = YEAR, y = Value), size = 0.3) +
        
        geom_point(aes(text = paste(Value, UNIT)), size = 2.5) +
        
        geom_point(size = 2.5) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(angle = 90,
                                     vjust = 0.5),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.title = element_blank()
        ) +
        
        scale_colour_manual(values = color_rcb) +
        
        scale_x_continuous(breaks = seq(y_min, y_max, 1)),
      tooltip = "text"
    )
    
    
  })
  
  # # 1.1.2 Sport ####
  
  output$Sport_group <- renderPlotly({
    # Reactive filter
    
    # Pr√©paration pour les deux groupe de sport
    
    d.ANA.06.SPORT <- d.ANA.06.11 %>%
      filter(DIMENSION == input$Dim_group) %>%
      filter(SPORT != "_T") %>%
      filter(SEX == "_T")
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.06.SPORT,
             mapping = aes(
               x = YEAR, y = Value, color = SPORT
             )) +
        
        geom_line(aes(x = YEAR, y = Value), size = 0.3) +
        
        geom_point(aes(text = paste(Value, UNIT)), size = 2.5) +
        
        geom_point(size = 2.5) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(angle = 90,
                                     vjust = 0.5),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.title = element_blank()
        ) +
        
        scale_colour_manual(values = color_rcb) +
        
        scale_x_continuous(breaks = seq(y_min, y_max, 1)),
      tooltip = "text"
    )
    
  })
  
  # 1.3 Kilometers - individuals ####
  
  # 1.3.1 Yearly ####
  
  output$rowers_km <- renderPlotly({
    # Reactive filter
    
    d.ANA.07 <- d.ANA.07.05 %>%
      filter(YEAR == input$Year_indiv) %>%
      filter(SEX == input$Sex_indiv) %>%
      filter(SPORT == input$Sport_indiv) %>%
      group_by(YEAR, SEX, SPORT) %>%
      mutate(RANK = min_rank(-DIST_KM)) %>%
      ungroup() %>%
      filter(RANK <= input$Number_indiv) %>%
      mutate(FIRST = case_when(RANK == 1 ~ TRUE,
                               TRUE ~ FALSE))
    
    # Plot
    
    ggplotly(
      ggplot(
        d.ANA.07,
        aes(
          x = reorder(NAME_PERS, DIST_KM),
          y = DIST_KM,
          fill = FIRST,
          text = paste(DIST_KM, " km")
        )
      ) +
        
        geom_col() +
        
        coord_flip() +
        
        theme_classic() +
        theme(
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.position = "none"
        ) +
        
        scale_fill_manual(values = color_rcb),
      tooltip = "text"
    )
    
    
  })
  
  # 1.3.2 Cumulative ####
  
  output$rowers_km_cumul <- renderPlotly({
    # Selectionner les personnes qui ont cumul√© le plus de km
    
    d.ANA.08.1 <- d.ANA.07.05 %>%
      filter(YEAR == input$Year_indiv) %>%
      group_by(NAME_PERS, SEX, SPORT) %>%
      summarise(DIST_KM = sum(DIST_KM)) %>%
      ungroup() %>%
      group_by(SEX, SPORT) %>%
      mutate(RANK = min_rank(-DIST_KM)) %>%
      ungroup() %>%
      filter(RANK <= input$Number_indiv) %>%
      select(NAME_PERS, SEX, SPORT) %>%
      distinct %>%
      mutate(CUMUL_CHAMPION = TRUE)
    
    # Pr√©parer les donn√©es pour le graphique
    
    d.ANA.08.2 <-
      left_join(d.ANA.08.1, d.ANA.07.05, by = c("NAME_PERS", "SEX", "SPORT")) %>%
      filter(YEAR <= input$Year_indiv) %>%
      filter(YEAR >= input$Year_indiv_cumul) %>%
      group_by(NAME_PERS, SEX, SPORT) %>%
      arrange(YEAR) %>%
      mutate(CUMUL_DIST_KM = cumsum(DIST_KM)) %>%
      ungroup() %>%
      filter(SEX == input$Sex_indiv) %>%
      filter(SPORT == input$Sport_indiv)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.08.2, aes(
        x = YEAR,
        y = CUMUL_DIST_KM,
        color = reorder(NAME_PERS, -CUMUL_DIST_KM)
      )) +
        
        geom_line(size = 0.3) +
        
        geom_point(aes(
          text = paste(
            CUMUL_DIST_KM,
            " km (from ",
            input$Year_indiv_cumul,
            " to ",
            input$Year_indiv,
            ")"
          )
        ), size = 2.5) +
        
        geom_point(size = 2.5) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        scale_x_continuous(breaks = seq(
          input$Year_indiv_cumul, input$Year_indiv, 1
        )),
      tooltip = "text"
    )
    
    
  })
  
  # 2.1 Attendance - months ####
  
  output$Month_Attendance <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.02 <- d.ANA.02.7 %>%
      filter(YEAR == input$Month_Attendance_Input)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.02) +
        
        geom_col(
          mapping = aes(
            x = MONTH_NAME,
            y = Average,
            text = paste("Average:", Average, " rowers")
          ),
          fill = color_rcb_light[4]
        ) +
        geom_line(
          mapping = aes(x = as.numeric(MONTH), y = Spot),
          size = 0.3,
          color = color_rcb_official
        ) +
        geom_point(
          mapping = aes(
            x = MONTH_NAME,
            y = Spot,
            text = paste("In ", YEAR, ": ", Spot, " rowers")
          ),
          size = 2.5,
          color = color_rcb_official
        ) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          )
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        ylim(0, 800),
      tooltip = "text"
    )
    
  })
  
  # 2.2 Attendance - weekdays ####
  
  output$DayWeek_Attendance <- renderPlotly({
    # Reactive filter
    
    d.ANA.05 <- d.ANA.05.3 %>%
      filter(SEASON == input$Season_DW_Attendance_Input) %>% 
      filter(YEAR == input$DayWeek_Attendance_Input)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.05) +
        
        geom_col(
          mapping = aes(
            x = WEEKDAY_NAME,
            y = Average,
            text = paste("Average:", Average, " rowers")
          ),
          fill = color_rcb_light[4]
        ) +
        geom_line(
          mapping = aes(x = as.numeric(WEEKDAY), y = Spot),
          size = 0.3,
          color = color_rcb_official
        ) +
        geom_point(
          mapping = aes(
            x = WEEKDAY_NAME,
            y = Spot,
            text = paste("In ", YEAR, ": ", Spot, " rowers")
          ),
          size = 2.5,
          color = color_rcb_official
        ) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          )
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        ylim(0, 30),
      tooltip = "text"
    )
    
  })
  
  # 2.3 Attendance - hours ####
  
  output$Hour_Attendance <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.10.9 <- d.ANA.10.8 %>%
      filter(YEAR == input$Year_Hours_Att_Input) %>%
      filter(SEASON == input$Season_Hours_Att_Input) %>%
      filter(WEEKDAY_NAME == input$DayWeek_Hours_Att_Input)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.10.9) +
        
        geom_col(
          mapping = aes(
            x = HOURS,
            y = Average,
            text = paste("Average:", Average, " %")
          ),
          fill = color_rcb_light[4]
        ) +
        geom_line(
          mapping = aes(x = as.numeric(HOURS), y = Spot),
          size = 0.3,
          color = color_rcb_official
        ) +
        geom_point(
          mapping = aes(
            x = HOURS,
            y = Spot,
            text = paste("At ", HOURS, "h: ", Spot, " %")
          ),
          size = 2.5,
          color = color_rcb_official
        ) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          )
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        ylim(0, ceiling(max(
          d.ANA.10.7$Value_pc
        ) / 10) * 10) +
        
        scale_x_continuous(breaks = seq(5, 20, 1)),

      tooltip = "text"
    )
    
  })
  
  
  # 3. Disciplines ####
  
  # 3.1 Sweep or scull ####
  
  output$Sweep_scull <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.08.9 <- d.ANA.08.8 %>%
      filter(DIMENSION == input$Dim_Sweep_scull)
    
    # Plot
    
    ggplotly(ggplot(d.ANA.08.9,
                    mapping = aes(x = YEAR, y = Value, color = BOAT_TYPE)) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(text = paste(Value, UNIT)), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        scale_x_continuous(
          breaks = seq(y_min, y_max, 1)
        ),
      tooltip = "text"
    )
    
  })
  
  # 3.2 Crew size ####
  
  output$Crew_size <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.09.9 <- d.ANA.09.8 %>%
      filter(DIMENSION == input$Dim_crew_size)
    
    # Plot
    
    ggplotly(ggplot(d.ANA.09.9,
                    mapping = aes(x = YEAR, y = Value, color = BOAT_SIZE)) +
               
               geom_point(size = 2.5) +
               
               geom_point(aes(text = paste(Value, UNIT)), size = 2.5) +
               
               geom_line(size = 0.3) +
               
               theme_classic() +
               
               theme(
                 text = element_text(size = 13),
                 axis.text.x = element_text(
                   angle = 90,
                   vjust = 0.5,
                   hjust = 1
                 ),
                 legend.title = element_blank()
               ) +
               
               theme(axis.title.x = element_blank(),
                     axis.title.y = element_blank()) +
               
               scale_colour_manual(values = color_rcb) +
               
               scale_x_continuous(
                 breaks = seq(y_min, y_max, 1)
               ),
             tooltip = "text"
    )
    
  })
  
  
  # 3.3 Crew destinations ####
  
  output$Crew_destination <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.11.9 <- d.ANA.11.8 %>%
      filter(YEAR == input$Year_crew) %>%
      filter(BOAT_SIZE == input$Size_crew)
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.11.9) +
        
        geom_col(
          mapping = aes(
            x = DIST_NAME,
            y = Average_crew,
            text = paste("Average:", Average_crew, "%")
          ),
          fill = color_rcb_light[4]
        ) +
        
        geom_point(
          mapping = aes(
            x = DIST_NAME,
            y = Spot_crew,
            text = paste("In ", YEAR, ": ", Spot_crew, "%")
          ),
          size = 2.5,
          color = color_rcb_official
        ) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          )
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
      
      ylim(0, 30),
        
      tooltip = "text"
    )
    
  })
  
  # 4. Boats   ####
  
  # 4.1 Single   ####
  
  # 4.1.1 Boats, km   ####
  
  output$Boat1_km <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat1) %>%
      filter(YEAR >= input$Year_boat_1_first) %>%
      filter(YEAR <= input$Year_boat_1_last)
    
    # Reorder boats

    d.ANA.03.41 <- d.ANA.03.4 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))

    # Plot
    
    ggplotly(
      ggplot(d.ANA.03.41, mapping = aes(
        x = YEAR, y = DIST_KM,
        color = BOAT_NAME
      )) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(text = paste(DIST_KM, " km")), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.41$DIST_KM
        ) / 1000) * 1000) +
        
        scale_x_continuous(
          breaks = seq(input$Year_boat_1_first, input$Year_boat_1_last, 1)
        ),
      tooltip = "text"
    )
    
  })
  
  # 4.1.2 Boats,  cumulative  ####
  
  output$Boat1_cumsum <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat1) %>%
      filter(YEAR >= input$Year_boat_1_first) %>%
      filter(YEAR <= input$Year_boat_1_last)
    
    # Cumul de kilom√®tres
    
    d.ANA.03.5 <- d.ANA.03.4  %>%
      group_by(BOAT_NAME) %>%
      arrange(YEAR) %>%
      mutate(CUMUL_DIST_KM = cumsum(DIST_KM)) %>%
      ungroup() %>%
      filter(BOAT_NAME %in% input$Boat1)
    
    # Reorder boats

    d.ANA.03.51 <- d.ANA.03.5 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(CUMUL_DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(
        d.ANA.03.51,
        mapping = aes(x = YEAR, y = CUMUL_DIST_KM, color = BOAT_NAME)
      ) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(
          text = paste(
            CUMUL_DIST_KM,
            " km (from ",
            input$Year_boat_1_first,
            " to ",
            input$Year_boat_1_last,
            ")"
          )), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.51$CUMUL_DIST_KM
        ) / 150) * 150) +
        
        scale_x_continuous(breaks = seq(input$Year_boat_1_first, input$Year_boat_1_last, 1)),
      tooltip = "text"
    )
    
  })
  
  # 4.2 Double   ####
  
  # 4.2.1 Boats, km   ####
  
  output$Boat2_km <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat2) %>%
      filter(YEAR >= input$Year_boat_2_first) %>%
      filter(YEAR <= input$Year_boat_2_last)
    
    # Reorder boats
    
    d.ANA.03.41 <- d.ANA.03.4 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.03.41, mapping = aes(
        x = YEAR, y = DIST_KM,
        color = BOAT_NAME
      )) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(text = paste(DIST_KM, " km")), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.41$DIST_KM
        ) / 1000) * 1000) +
        
        scale_x_continuous(
          breaks = seq(input$Year_boat_2_first, input$Year_boat_2_last, 1)
        ),
      tooltip = "text"
    )
    
  })
  
  # 4.2.2 Boats,  cumulative  ####
  
  output$Boat2_cumsum <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat2) %>%
      filter(YEAR >= input$Year_boat_2_first) %>%
      filter(YEAR <= input$Year_boat_2_last)
    
    # Cumul de kilom√®tres
    
    d.ANA.03.5 <- d.ANA.03.4  %>%
      group_by(BOAT_NAME) %>%
      arrange(YEAR) %>%
      mutate(CUMUL_DIST_KM = cumsum(DIST_KM)) %>%
      ungroup() %>%
      filter(BOAT_NAME %in% input$Boat2)
    
    # Reorder boats
    
    d.ANA.03.51 <- d.ANA.03.5 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(CUMUL_DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(
        d.ANA.03.51,
        mapping = aes(x = YEAR, y = CUMUL_DIST_KM, color = BOAT_NAME)
      ) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(
          text = paste(
            CUMUL_DIST_KM,
            " km (from ",
            input$Year_boat_2_first,
            " to ",
            input$Year_boat_2_last,
            ")"
          )), size = 3) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.51$CUMUL_DIST_KM
        ) / 150) * 150) +
        
        scale_x_continuous(breaks = seq(input$Year_boat_2_first, input$Year_boat_2_last, 1)),
      tooltip = "text"
    )
    
  })
  
  # 4.3 Quads   ####
  
  # 4.3.1 Boats, km   ####
  
  output$Boat4_km <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat4) %>%
      filter(YEAR >= input$Year_boat_4_first) %>%
      filter(YEAR <= input$Year_boat_4_last)
    
    # Reorder boats
    
    d.ANA.03.41 <- d.ANA.03.4 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.03.41, mapping = aes(
        x = YEAR, y = DIST_KM,
        color = BOAT_NAME
      )) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(text = paste(DIST_KM, " km")), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.41$DIST_KM
        ) / 1000) * 1000) +
        
        scale_x_continuous(
          breaks = seq(input$Year_boat_4_first, input$Year_boat_4_last, 1)
        ),
      tooltip = "text"
    )
    
  })
  
  # 4.3.2 Boats,  cumulative  ####
  
  output$Boat4_cumsum <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat4) %>%
      filter(YEAR >= input$Year_boat_4_first) %>%
      filter(YEAR <= input$Year_boat_4_last)
    
    # Cumul de kilom√®tres
    
    d.ANA.03.5 <- d.ANA.03.4  %>%
      group_by(BOAT_NAME) %>%
      arrange(YEAR) %>%
      mutate(CUMUL_DIST_KM = cumsum(DIST_KM)) %>%
      ungroup() %>%
      filter(BOAT_NAME %in% input$Boat4)
    
    # Reorder boats
    
    d.ANA.03.51 <- d.ANA.03.5 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(CUMUL_DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(
        d.ANA.03.51,
        mapping = aes(x = YEAR, y = CUMUL_DIST_KM, color = BOAT_NAME)
      ) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(
          text = paste(
            CUMUL_DIST_KM,
            " km (from ",
            input$Year_boat_4_first,
            " to ",
            input$Year_boat_4_last,
            ")"
          )), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.51$CUMUL_DIST_KM
        ) / 150) * 150) +
        
        scale_x_continuous(breaks = seq(input$Year_boat_4_first, input$Year_boat_4_last, 1)),
      tooltip = "text"
    )
    
  })
  
  # 4.4 Octuple  ####
  
  # 4.3.1 Boats, km   ####
  
  output$Boat8_km <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat8) %>%
      filter(YEAR >= input$Year_boat_8_first) %>%
      filter(YEAR <= input$Year_boat_8_last)
    
    # Reorder boats
    
    d.ANA.03.41 <- d.ANA.03.4 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(d.ANA.03.41, mapping = aes(
        x = YEAR, y = DIST_KM,
        color = BOAT_NAME
      )) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(text = paste(DIST_KM, " km")), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.41$DIST_KM
        ) / 1000) * 1000) +
        
        scale_x_continuous(
          breaks = seq(input$Year_boat_8_first, input$Year_boat_8_last, 1)
        ),
      tooltip = "text"
    )
    
  })
  
  # 4.3.2 Boats,  cumulative  ####
  
  output$Boat8_cumsum <- renderPlotly({
    
    # Reactive filter
    
    d.ANA.03.4 <- d.ANA.03.3 %>%
      filter(BOAT_NAME %in% input$Boat8) %>%
      filter(YEAR >= input$Year_boat_8_first) %>%
      filter(YEAR <= input$Year_boat_8_last)
    
    # Cumul de kilom√®tres
    
    d.ANA.03.5 <- d.ANA.03.4  %>%
      group_by(BOAT_NAME) %>%
      arrange(YEAR) %>%
      mutate(CUMUL_DIST_KM = cumsum(DIST_KM)) %>%
      ungroup() %>%
      filter(BOAT_NAME %in% input$Boat8)
    
    # Reorder boats
    
    d.ANA.03.51 <- d.ANA.03.5 %>%
      mutate(BOAT_NAME = as.factor(BOAT_NAME)) %>%
      arrange(desc(YEAR), desc(CUMUL_DIST_KM)) %>%
      mutate(BOAT_NAME = fct_inorder(BOAT_NAME))
    
    # Plot
    
    ggplotly(
      ggplot(
        d.ANA.03.51,
        mapping = aes(x = YEAR, y = CUMUL_DIST_KM, color = BOAT_NAME)
      ) +
        
        geom_point(size = 2.5) +
        
        geom_point(aes(
          text = paste(
            CUMUL_DIST_KM,
            " km (from ",
            input$Year_boat_8_first,
            " to ",
            input$Year_boat_8_last,
            ")"
          )), size = 2.5) +
        
        geom_line(size = 0.3) +
        
        theme_classic() +
        
        theme(
          text = element_text(size = 13),
          axis.text.x = element_text(
            angle = 90,
            vjust = 0.5,
            hjust = 1
          ),
          legend.title = element_blank()
        ) +
        
        theme(axis.title.x = element_blank(),
              axis.title.y = element_blank()) +
        
        scale_colour_manual(values = color_rcb) +
        
        ylim(0, ceiling(max(
          d.ANA.03.51$CUMUL_DIST_KM
        ) / 150) * 150) +
        
        scale_x_continuous(breaks = seq(input$Year_boat_8_first, input$Year_boat_8_last, 1)),
      tooltip = "text"
    )
    
  })
  
  
}

############################################################################## #
# Shiny App ####
############################################################################## #


shinyApp(ui = ui, server = server)
